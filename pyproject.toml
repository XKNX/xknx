[build-system]
requires = ["setuptools~=62.3"]
build-backend = "setuptools.build_meta"

[project]
name         = "xknx"
authors      = [
    {name = "Julius Mittenzwei", email = "julius@mittenzwei.com"},
    {name = "Matthias Alphart", email = "farmio@alphart.net"},
    {name = "Marvin Wichmann", email = "me@marvin-wichmann.de"},
]
classifiers  = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: System :: Hardware :: Hardware Drivers",
]
dependencies = [
    "async_timeout>=4.0.0; python_version<'3.11'",
    "cryptography>=35.0.0",
    "ifaddr>=0.1.7",
]
description  = "An Asynchronous Library for the KNX protocol. Documentation: https://xknx.io/"
dynamic      = ["version"]
keywords     = ["KNX", "EIB", "Home Assistant", "home automation"]
license      = {text = "MIT License"}
readme       = "README.md"
requires-python = ">=3.9.0"

[project.urls]
homepage = "https://xknx.io/"
repository = "https://github.com/XKNX/xknx.git"


[tool.setuptools.dynamic]
version = {attr = "xknx.__version__.__version__"}

[tool.setuptools.packages.find]
include = ["xknx*"]

[tool.black]
target-version = ["py39", "py310", "py311"]
exclude = "generated"


[tool.codespell]
skip = '*.min.js,docs/config-converter/lib/*,*.lock'
ignore-words-list = 'hass'
quiet-level = 2


[tool.isort]
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
combine_as_imports = true


[tool.mypy]
pretty = true
python_version = "3.9"
show_error_codes = true
strict = true
# additional flags to strict mode
ignore_missing_imports = true
implicit_reexport = true
warn_unreachable = true


[tool.pylint.master]
ignore = "test"
persistent = "no"
reports = "no"

[tool.pylint.message_control]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# raise-missing-from - we use this in order to avoid too generic exception to the user
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# fixme - TODO
disable = [
  "format",
  "abstract-method",
  "cyclic-import",
  "duplicate-code",
  "fixme",
  "inconsistent-return-statements",
  "locally-disabled",
  "not-context-manager",
  "raise-missing-from",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "too-many-boolean-expressions",
  "unused-argument",
  "wrong-import-order",
  ]
# disabled for tests via command line options in tox.ini:
#   - protected-access
#   - abstract-class-instantiated
enable = [
  "use-symbolic-message-instead",
]

[tool.pylint.format]
expected-line-ending-format = "LF"

[tool.pylint.reports]
score = "no"
output-format = "colorized"


[tool.pytest.ini_options]
testpaths = "test"
asyncio_mode = "auto"


[tool.ruff]
target-version = "py39"
select = [
  "C4",  # comprehensions
  "D",   # pydocstyle
  "E",   # pycodestyle
  "F",   # pyflakes
  "RUF", # ruff specific
  "T20", # print
  "UP",  # pyupgrade
  "W",   # pydocstyle warning
]
ignore = [
  "D202",
  "D203",
  "D212",
  "E501", # line too long
]
extend-exclude = [
  "script",
]

[tool.ruff.per-file-ignores]
"examples/*" = ["T20"]  # print-used
"test/*" = ["RUF012"]  # Mutable class attributes should be annotated with `typing.ClassVar`
